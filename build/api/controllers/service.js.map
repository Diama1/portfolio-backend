{"version":3,"sources":["../../../src/api/controllers/service.js"],"names":["Service","db","Services","req","res","body","title","description","image","data","findAll","where","response","create","newService","status","json","message","allServices","send","error","articles"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;IAEQA,O,GAAYC,kB,CAAZD,O;AAER;;;;;;IAKME,Q;;;;;;;;;;AACJ;;;;;;;;;+CAM2BC,G,EAAKC,G;;;;;;;4BACQD,GAAG,CAACE,I,EAAlCC,K,aAAAA,K,EAAOC,W,aAAAA,W,EAAaC,K,aAAAA,K;AACtBC,gBAAAA,I,GAAO;AACXH,kBAAAA,KAAK,EAALA,KADW;AACJC,kBAAAA,WAAW,EAAXA,WADI;AACSC,kBAAAA,KAAK,EAALA;AADT,iB;;uBAGUR,OAAO,CAACU,OAAR,CAAgB;AACrCC,kBAAAA,KAAK,EAAE;AACLL,oBAAAA,KAAK,EAALA;AADK;AAD8B,iBAAhB,C;;;AAAjBM,gBAAAA,Q;;oBAMDA,QAAQ,CAAC,CAAD,C;;;;;;uBACcZ,OAAO,CAACa,MAAR,CAAe;AACtCP,kBAAAA,KAAK,EAAEG,IAAI,CAACH,KAD0B;AAEtCC,kBAAAA,WAAW,EAAEE,IAAI,CAACF,WAFoB;AAGtCC,kBAAAA,KAAK,EAAEC,IAAI,CAACD;AAH0B,iBAAf,C;;;AAAnBM,gBAAAA,U;iDAKCV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BP,kBAAAA,IAAI,EAAEK,UADoB;AAE1BG,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;AAKTb,gBAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE;AADU,iBAArB;;;;;;;;;;;;;;;;AAKF;;;;;;;;;;;;gDAM4Bd,G,EAAKC,G;;;;;;;uBACLJ,OAAO,CAACU,OAAR,E;;;AAApBQ,gBAAAA,W;;oBACDA,WAAW,CAAC,CAAD,C;;;;;kDAAYd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEC,kBAAAA,KAAK,EAAE;AAAT,iBAArB,C;;;AAC5BhB,gBAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AACnBE,kBAAAA,QAAQ,EAAEH;AADS,iBAArB;;;;;;;;;;;;;;;;;;;;;eAKWhB,Q","sourcesContent":["import db from '../../sequelize/models';\n\nconst { Service } = db;\n\n/**\n * @author Diane Mahoro\n * @class Services\n * @description this class performs the whole service\n */\nclass Services {\n  /**\n   *\n   * @param {Object} req - Request object\n   * @param {Object} res - Response object\n   * @returns {Object} - Response object\n   */\n  static async createService(req, res) {\n    const { title, description, image } = req.body;\n    const data = {\n      title, description, image\n    };\n    const response = await Service.findAll({\n      where: {\n        title\n      }\n\n    });\n    if (!response[0]) {\n      const newService = await Service.create({\n        title: data.title,\n        description: data.description,\n        image: data.image\n      });\n      return res.status(201).json({\n        data: newService,\n        message: 'Service created successfully'\n      });\n    }\n    res.status(409).json({\n      message: 'the service already exists'\n    });\n  }\n\n  /**\n   *\n   * @param {Object} req - Request object\n   * @param {Object} res - Response object\n   * @returns {Object} - Response object\n   */\n  static async getAllServices(req, res) {\n    const allServices = await Service.findAll();\n    if (!allServices[0]) return res.status(404).send({ error: 'Whoops! No Service found!' });\n    res.status(200).send({\n      articles: allServices\n    });\n  }\n}\nexport default Services;\n"],"file":"service.js"}